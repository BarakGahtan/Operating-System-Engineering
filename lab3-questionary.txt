=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.

=== Q In Exercise 4, can the function 'trap' ever return?
===   (yes/no)
no

=== Q What is the purpose of having an individual handler function for
===   each exception/interrupt? (i.e., if all exceptions/interrupts
===   were delivered to the same handler, what feature that exists in
===   the current implementation could not be provided?)
===   (free form, 1 sentence)
      The purpose is to maintain privilege isolation between user
      space and the kernel.

=== Q Did you have to do anything to make the user/softint program
===   behave correctly?
===   (yes/no)
no

=== Q The grade script expects it to produce a general protection
===   fault (trap 13), but softint's code says int $14. Why should
===   this produce interrupt vector 13? 
===   (free form, 1 sentence)
      Because we are in user space, interrupt 14 is not alloud
      (requires CPL 0), So this raises protection fault
      (interrupt 13 - privillege mismatch)).

=== Q What happens if the kernel actually allows softint's int $14
===   instruction to invoke the kernel's page fault handler (which is
===   interrupt vector 14)?
===   (free form, 1 sentence)
      Page fault handler will shut down any user process that invokes it,
      that way there wont be a violation of isolation.

=== Q The break point test case will either generate a break point
===   exception or a general protection fault depending on how you
===   initialized the break point entry in the IDT (i.e., your call to
===   SETGATE from idt_init). Why? How did you need to set it in
===   order to get the breakpoint exception to work as specified
===   above and what incorrect setup would cause it to trigger a
===   general protection fault?
===   (free form)
      Depends on how we setup the breakpoint interrupt DPL, we will get a
      break point exception / genreal protection falut. This is because
      the DPL determines if it can be invoked with user level code.
      In order to get the breakpoint exception to work as specified in the
      question, we need to setup the IDT with the correct permissions for the
      breakpoint interrupt with DPL = 3. if we setup it with DPL = 0,
      then the user code asked for a breakpoint would have generated a
      general protection fault.
     

=== Q What do you think is the point of these mechanisms, particularly
===   in light of what the user/softint test program does? 
===   (free form, 1 sentence)
    To restrict the influence user level code can have on the kernel,
    the user code can ask for syscalls and set breakpoints but cant
    manipulate virtual memory.

=== Q In Exercise 9, what causes the page fault which panics the
===   kernel when running user/breakpoint?
===   (free form, 1 sentence)
      Running mon_backtrace() causes a print of 6 dwords but only the first
      3 dwords to print are below USTACKTOP - so when trying to access the
      4th word a page fault happens, because the page above USTACKTOP is an
      empty page.
    

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
1

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
kern/trapentry.S
kern/trap.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
in trapentry.S:
we created a macro that pushes the trap number into the stack, then jumps
to all_traps. Depends on the trap_number, for traps where the cpu doesnt
push an error code, we also push a 0 before pushing the trap number.
this way, the frame has the correct format. In addition, we created an array
of handlers (called 'handlers' in the code'), which is used as extern later in
trap.c.

in trap.c:
we use the handlers array, and in a loop we call SETGATE for each of it's
entries, separating the care for breakpoint case and syscall case from the
other handlers.

