// Simple command-line kernel monitor useful for
// controlling the kernel and exploring the system interactively.

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>

#include <kern/console.h>
#include <kern/monitor.h>
#include <kern/kdebug.h>
#include <kern/pmap.h>

#define CMDBUF_SIZE	80	// enough for one VGA text line


struct Command {
	const char *name;
	const char *desc;
	// return -1 to force monitor to exit
	int (*func)(int argc, char** argv, struct Trapframe* tf);
};

static struct Command commands[] = {
	{ "help", "Display this list of commands", mon_help },
	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
	{ "backtrace", "Display stack backtrace", mon_backtrace },
    { "showmappings", "Display physical page mappings and corresponding permission bits that apply to a given range", mon_showmappings },
    { "chpgperm", "Explicitly set, clear, or change the permissions of any mapping in the current address space", mon_chpgperm },
    { "memdump" , "Dump the contents of a range of memory given either a virtual or physical address range", mon_memdump },
    
};
#define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))

/***** Implementations of basic kernel monitor commands *****/

int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
	int i;

	for (i = 0; i < NCOMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
	return 0;
}

int
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
{
	extern char _start[], entry[], etext[], edata[], end[];

	cprintf("Special kernel symbols:\n");
	cprintf("  _start                  %08x (phys)\n", _start);
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
	cprintf("Kernel executable memory footprint: %dKB\n",
		ROUNDUP(end - entry, 1024) / 1024);
	return 0;
}

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
    uint32_t *ebp = (uint32_t *)read_ebp();
    cprintf("Stack backtrace:\n");
    while (ebp != 0){
        /*
        cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n",
            ebp, ebp[1], ebp[2], ebp[3], ebp[4], ebp[5], ebp[6]);
        */

        if ((uint32_t)ebp == 0xeebfdff0) {  // handle the stack created by _start
            cprintf("  ebp %08x  eip %08x  args %08x %08x\n", ebp, ebp[1], ebp[2], ebp[3]);
        } else {
            cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n", ebp, ebp[1], ebp[2], ebp[3], ebp[4], ebp[5], ebp[6]);
        }

        struct Eipdebuginfo iinfo;
        if(debuginfo_eip(ebp[1], &iinfo) == 0) {
            cprintf("%s:%d: %.*s+%d\n", iinfo.eip_file, iinfo.eip_line,
            iinfo.eip_fn_namelen, iinfo.eip_fn_name, ebp[1] - iinfo.eip_fn_addr);
        }

        ebp = (uint32_t *)(*ebp);
    }
    return 0;
}

int
mon_showmappings(int argc, char **argv, struct Trapframe *tf)
{
    if (argc != 3) {
        cprintf("Parameters are: showmappings bound1 bound2\n");
        return 0;
    }
    
    uintptr_t bound1 = ROUNDDOWN(strtol(argv[1], NULL, 16), PGSIZE);
    uintptr_t bound2 = ROUNDDOWN(strtol(argv[2], NULL, 16), PGSIZE);
    if (bound1 > bound2) {
        cprintf("bound1 must be less than bound2\n");
        return 0;
    }
    
    pte_t *page_table_entry;
    extern pde_t *kern_pgdir;
    
    char flags[] = "GSDACTUWP"; 
    int NUM_FLAGS = 9;
    cprintf("VA      PA      Flags\n");
    uintptr_t ptr;
    
    for (ptr = bound1; ptr <= bound2; ptr += PGSIZE) {
        cprintf("0x%08x      ", ptr);
        page_table_entry = pgdir_walk(kern_pgdir, (void *)ptr, 0);
        
        if (!page_table_entry) {
            cprintf(" not mapped");
        } else {
            cprintf("0x%08x      ", PTE_ADDR(*page_table_entry));
            int flag = (*page_table_entry & 0xFFF);
            int i;
            for (i = 0; i < NUM_FLAGS; i++) {
                if ((flag >> (NUM_FLAGS - 1 - i)) & 1) {
                    cprintf("%c", flags[i]);
                } else {
                    cprintf("-");
                }
            }
        }
        
        cprintf("\n");
        if (ptr >= 0xfffff000)
            break;
    }
    return 0;
}



int
mon_chpgperm(int argc, char **argv, struct Trapframe *tf)
{
    int action = 0;
    #define GIVEN_SET    1
    #define GIVEN_CLEAR  2
    #define GIVEN_CHANGE 3
    
    if (argc < 3) {
        cprintf("Parameters are: chpgperm action va [state]\n");
        return 0;
    }
    if (!(strcmp(argv[1], "set")))
        action = GIVEN_SET;
    else if (!(strcmp(argv[1], "clear")))
        action = GIVEN_CLEAR;
    else if (!(strcmp(argv[1], "change")))
        action = GIVEN_CHANGE;
    else {
        cprintf("chpgperm: Not a valid action\n");
        return 0;
    }
  
    extern pde_t *kern_pgdir;
    uintptr_t virtual_address = ROUNDDOWN(strtol(argv[2], NULL, 16), PGSIZE);
    pte_t *page_table_entry = pgdir_walk(kern_pgdir, (void *)virtual_address, 0);
    if (!page_table_entry) {
        cprintf("chpgperm: Cannot change permission for page [0x%08x,0x%08x]\n", virtual_address, (virtual_address+PGSIZE));
        return 0;
    }
    if (!(*page_table_entry & PTE_P)) {
        cprintf("chpgperm: Cannot change permission for page [0x%08x,0x%08x]\n",  virtual_address, (virtual_address+PGSIZE));
        return 0;
    }
    
    
    // clean action
    
    if (action == GIVEN_CLEAR) {
        if (argc != 3) {
            cprintf("Parameters are: chpgperm clear va\n");
            return 0;
        }
        
        *page_table_entry = *page_table_entry & ~(PTE_U | PTE_W);
        cprintf("[0x%08x,0x%08x]: Supervisor | Read-only\n", virtual_address, (virtual_address+PGSIZE));
    }
    
    // set action
    
    if ((action == GIVEN_SET) && (argc != 4)) {
        cprintf("Usage: chpgperm set va state\n");
        cprintf("Each state is of the form '([[Ss]|[Uu]])([[Rr]|[Ww]])'.\n");
        return 0;
    }
 
    if (( action == GIVEN_SET ) && (strlen(argv[3]) != 2)) {
        cprintf("chpgperm set: Each state is of the form '([[Ss]|[Uu]])([[Rr]|[Ww]])'.\n");
        return 0;
    }
    if (action == GIVEN_SET) {
        int perm = 0;
        if ((argv[3][0] == 'U') | (argv[3][0] == 'u')) {
            perm |= PTE_U;
        }
        else if ((argv[3][0] != 'S') & (argv[3][0] != 's')) {
            cprintf("chpgperm set: '%c' is not a valid flag for the U/S bit\n", argv[3][0]);
            return 0;
        }
        if ((argv[3][1] == 'W') | (argv[3][1] == 'w')) {
            perm |= PTE_W;
        }
        else if ((argv[3][1] != 'R') & (argv[3][1] != 'r')) {
            cprintf("chpgperm set: '%c' is not a valid flag for the R/W bit\n", argv[3][1]);
            return 0;            
        }
        
        *page_table_entry = (*page_table_entry & ~(PTE_U | PTE_W)) | perm;
        cprintf("[0x%08x,0x%08x]: ", virtual_address, (virtual_address+PGSIZE));
        cprintf((*page_table_entry & PTE_U) ? "User" : "Supervisor");
        cprintf(" | ");
        cprintf((*page_table_entry & PTE_W) ? "Read/write" : "Read-only");
        cprintf("\n");
    }
    
    // change action
    
    if (action == GIVEN_CHANGE) {
        if (argc != 4) {
            cprintf("Parameters are: chpgperm change va state\n");
            cprintf("Each state is of the form '[+-]([Uu]|[Ww])'.\n");
            return 0;
        }

        if (strlen(argv[3]) != 2) {
            cprintf("chpgperm change: Each state is of the form '[+-]([Uu]|[Ww])'.\n");
            return 0;
        }
        
        int permit = 0, perm = 0;
        if (argv[3][0] == '+') {
            permit = 1;
        } else if (argv[3][0] == '-') {
            permit = 0;
        } else {
            cprintf("chpgperm change: Each state is of the form '[+-]([Uu]|[Ww])'.\n");
            return 0;
        }
        if ((argv[3][1] == 'U') | (argv[3][1] == 'u')) {
            perm = PTE_U;
        } else if ((argv[3][1] == 'W') | (argv[3][1] == 'w')) {
            perm = PTE_W;
        } else {
            cprintf("chpgperm change: '%c' is not a valid flag either for the U/S bit or the R/W bit\n", argv[3][1]);
            return 0;
        }
        if (permit) {
            *page_table_entry |= perm;
        } else {
            *page_table_entry &= (~perm);
        }
        cprintf("[0x%08x,0x%08x]: ", virtual_address, (virtual_address+PGSIZE));
        cprintf((*page_table_entry & PTE_U) ? "User" : "Supervisor");
        cprintf(" | ");
        cprintf((*page_table_entry & PTE_W) ? "Read/write" : "Read-only");
        cprintf("\n");
    }
    return 0;
}


int
mon_memdump(int argc, char **argv, struct Trapframe *tf)
{
    if ((argc < 3) | (argc > 4)) {
        cprintf("Parameters are: memdump op bound1 [bound2]\n");
        return 0;
    }
    uintptr_t bound1 = ROUNDDOWN(strtol(argv[2], NULL, 16), 0x10);
    uintptr_t bound2 = (argc == 3) ? bound1 : ROUNDDOWN(strtol(argv[3], NULL, 16), 0x10);
    extern pde_t *kern_pgdir;
    if (bound1 > bound2) {
        cprintf("memdump: bound2 cannot be lower than bound1\n");
        return 0;
    }
    int virtual = 0;
    if ((!(strcmp(argv[1], "-V"))) | (!(strcmp(argv[1], "-v")))) {
        virtual = 1;
    } else if ((!(strcmp(argv[1], "-P"))) | (!(strcmp(argv[1], "-p")))) {
        virtual = 0;
    } else {
        cprintf("memdump: op is of the form '(-[Vv])|(-[Pp])'.\n");
        return 0;
    }
    if (virtual) {
        cprintf("Virtual       Physical\n");
        uintptr_t v;
        for (v = bound1; v <= bound2; v += 0x10) {
            cprintf("[0x%08x]  ", v);
            struct PageInfo *page_information = page_lookup(kern_pgdir, (void *)v, NULL);
            if (page_information) {
                cprintf("[0x%08x]    ", page2pa(page_information) + PGOFF(v));
                int j;
                for (j = 0; j < 0x10; j += 4) {
                    cprintf("%08lx ", *(long *)(v + j));
                }
                cprintf("\n");
                continue;
            } else {
                cprintf(" not mapped\n");
                continue;
            }
        }   
    } else {     
        cprintf("Physical\n");
        uintptr_t ptr;
        for (ptr = bound1; ptr <= bound2; ptr += 0x10) {
            cprintf("[0x%08x]    ", ptr);
            int j;
            for (j = 0; j < 0x10; j += 4) {
                cprintf("%08lx ", *(long *)KADDR(ptr + j));
            }
        }
        cprintf("\n");
    }
    return 0;
}

/***** Kernel monitor command interpreter *****/

#define WHITESPACE "\t\r\n "
#define MAXARGS 16

static int
runcmd(char *buf, struct Trapframe *tf)
{
	int argc;
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
			*buf++ = 0;
		if (*buf == 0)
			break;

		// save and scan past next arg
		if (argc == MAXARGS-1) {
			cprintf("Too many arguments (max %d)\n", MAXARGS);
			return 0;
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
			buf++;
	}
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
	for (i = 0; i < NCOMMANDS; i++) {
		if (strcmp(argv[0], commands[i].name) == 0)
			return commands[i].func(argc, argv, tf);
	}
	cprintf("Unknown command '%s'\n", argv[0]);
	return 0;
}

void
monitor(struct Trapframe *tf)
{
	char *buf;

	cprintf("Welcome to the JOS kernel monitor!\n");
	cprintf("Type 'help' for a list of commands.\n");

	if(tf != NULL) print_trapframe(tf);

	while (1) {
		buf = readline("K> ");
		if (buf != NULL)
			if (runcmd(buf, tf) < 0)
				break;
	}
}


